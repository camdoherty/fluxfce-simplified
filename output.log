fluxfce_cli.py:217:5: C901 `main` is too complex (36 > 10)
    |
216 | # --- Main Execution Logic ---
217 | def main():
    |     ^^^^ C901
218 |     parser = argparse.ArgumentParser(
219 |         description="fluxfce (CLI): Manage XFCE appearance via sunrise/sunset timing.",
    |

fluxfce_core/api.py:22:5: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
20 |       )  # Corrected import location for check
21 |   except ImportError:
22 | /     raise ImportError(
23 | |         "Required module 'zoneinfo' not found. FluxFCE requires Python 3.9+."
24 | |     )
   | |_____^ B904
   |

fluxfce_core/api.py:51:5: C901 `_apply_settings_for_mode` is too complex (13 > 10)
   |
50 | # Updated internal helper to use the renamed config loader
51 | def _apply_settings_for_mode(mode: str) -> bool:
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ C901
52 |     """Internal helper to apply all settings for 'day' or 'night'."""
53 |     if mode not in ["day", "night"]:
   |

fluxfce_core/api.py:424:5: C901 `set_default_from_current` is too complex (17 > 10)
    |
424 | def set_default_from_current(mode: str) -> bool:
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ C901
425 |     """
426 |     Saves the current desktop settings (theme, background, screen) as the
    |

fluxfce_core/api.py:558:5: C901 `get_status` is too complex (27 > 10)
    |
558 | def get_status() -> dict[str, Any]:
    |     ^^^^^^^^^^ C901
559 |     """
560 |     Retrieves the current status of fluxfce.
    |

fluxfce_core/helpers.py:14:5: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
12 |       from zoneinfo import ZoneInfo, ZoneInfoNotFoundError
13 |   except ImportError:
14 | /     raise ImportError(
15 | |         "Required module 'zoneinfo' not found. FluxFCE requires Python 3.9+."
16 | |     )
   | |_____^ B904
17 |   # Import custom exceptions from within the same package
18 |   from .exceptions import DependencyError, FluxFceError, ValidationError
   |

fluxfce_core/helpers.py:186:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
184 |           FileNotFoundError
185 |       ):  # Should be caught by check_dependencies, but belts and suspenders
186 | /         raise DependencyError(
187 | |             "The 'systemctl' command was not found, cannot check 'atd' status."
188 | |         )
    | |_________^ B904
189 |       except Exception as e:
190 |           # Catch potential errors from run_command itself or re-raised CalledProcessError
    |

fluxfce_core/helpers.py:196:5: C901 `detect_system_timezone` is too complex (23 > 10)
    |
195 | # --- Detect timezone ---
196 | def detect_system_timezone() -> Optional[str]:
    |     ^^^^^^^^^^^^^^^^^^^^^^ C901
197 |     """
198 |     Attempts to detect the system's configured IANA timezone name.
    |

fluxfce_core/helpers.py:354:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
352 |       except ValueError:
353 |           # Should not happen with the regex, but safeguard
354 | /         raise ValidationError(
355 | |             f"Could not convert value part '{match.group(1)}' to float."
356 | |         )
    | |_________^ B904
357 |
358 |       direction = match.group(3)
    |

fluxfce_core/scheduler.py:13:5: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
11 |       from zoneinfo import ZoneInfo, ZoneInfoNotFoundError
12 |   except ImportError:
13 | /     raise ImportError(
14 | |         "Required module 'zoneinfo' not found. FluxFCE requires Python 3.9+."
15 | |     )
   | |_____^ B904
16 |
17 |   # Import helpers, sun calculation, and exceptions
   |

fluxfce_core/scheduler.py:60:9: C901 `_get_pending_jobs` is too complex (14 > 10)
   |
58 |             ) from e
59 |
60 |     def _get_pending_jobs(self) -> list[dict[str, str]]:
   |         ^^^^^^^^^^^^^^^^^ C901
61 |         """
62 |         Gets list of pending 'at' jobs created by fluxfce.
   |

fluxfce_core/scheduler.py:182:9: C901 `schedule_transitions` is too complex (24 > 10)
    |
180 |         return all_cleared
181 |
182 |     def schedule_transitions(
    |         ^^^^^^^^^^^^^^^^^^^^ C901
183 |         self,
184 |         lat: float,
    |

fluxfce_core/scheduler.py:236:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
234 |             today = now_local.date()
235 |         except ZoneInfoNotFoundError:
236 |             raise ValidationError(f"Invalid Timezone '{tz_name}' during scheduling.")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
237 |         except Exception as e:
238 |             raise SchedulerError(
    |

fluxfce_core/sun.py:12:5: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
10 |   except ImportError:
11 |       # This is a critical dependency failure if zoneinfo is expected
12 | /     raise ImportError(
13 | |         "Required module 'zoneinfo' not found. FluxFCE requires Python 3.9+."
14 | |     )
   | |_____^ B904
15 |
16 |   # Import custom exceptions from within the same package
   |

fluxfce_core/sun.py:94:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
92 |       except ZeroDivisionError:
93 |           # This can happen near the poles if cos(decl) is near zero
94 | /         raise CalculationError(
95 | |             "Division by zero encountered during hour angle calculation (likely near poles)."
96 | |         )
   | |_________^ B904
97 |
98 |       # Check for polar day/night conditions
   |

fluxfce_core/sun.py:162:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
160 |     except ZoneInfoNotFoundError:
161 |         log.error(f"Invalid or unknown IANA Timezone Name: '{tz_name}'")
162 |         raise ValidationError(f"Invalid or unknown IANA Timezone Name: '{tz_name}'")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
163 |     except Exception as e:  # Catch other potential zoneinfo errors
164 |         log.error(f"Error loading timezone '{tz_name}': {e}")
    |

fluxfce_core/systemd.py:136:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
134 |             return code, stdout, stderr
135 |         except FileNotFoundError:
136 |             raise DependencyError("systemctl command not found.")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
137 |         except Exception as e:
138 |             log.exception(f"Unexpected error running systemctl command: {e}")
    |

fluxfce_core/systemd.py:167:9: C901 `install_units` is too complex (13 > 10)
    |
166 |     # --- UPDATED install_units ---
167 |     def install_units(
    |         ^^^^^^^^^^^^^ C901
168 |         self, script_path: str, python_executable: Optional[str] = None
169 |     ) -> bool:
    |

fluxfce_core/systemd.py:286:9: C901 `remove_units` is too complex (11 > 10)
    |
285 |     # --- UPDATED remove_units ---
286 |     def remove_units(self) -> bool:
    |         ^^^^^^^^^^^^ C901
287 |         """
288 |         Stops, disables, and removes all managed systemd user units.
    |

fluxfce_core/xfce.py:34:9: C901 `find_desktop_paths` is too complex (11 > 10)
   |
32 |             raise XfceError(f"Cannot initialize XfceHandler: {e}") from e
33 |
34 |     def find_desktop_paths(self) -> list[str]:
   |         ^^^^^^^^^^^^^^^^^^ C901
35 |         """
36 |         Finds relevant XFCE desktop property base paths for background settings.
   |

fluxfce_core/xfce.py:195:9: C901 `get_background_settings` is too complex (24 > 10)
    |
193 |             ) from e
194 |
195 |     def get_background_settings(self) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^^^ C901
196 |         """
197 |         Gets background settings (style, colors) from the first detected path.
    |

fluxfce_core/xfce.py:351:9: C901 `set_background` is too complex (19 > 10)
    |
349 |             ) from e
350 |
351 |     def set_background(self, hex1: str, hex2: Optional[str], direction: str) -> bool:
    |         ^^^^^^^^^^^^^^ C901
352 |         """
353 |         Sets the background to solid or gradient color across all detected paths.
    |

fluxfce_core/xfce.py:532:9: C901 `get_screen_settings` is too complex (13 > 10)
    |
530 |         return True
531 |
532 |     def get_screen_settings(self) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^ C901
533 |         """
534 |         Gets screen temperature and brightness via xsct. Attempts different parsing
    |

fluxfce_deps_check.py:290:5: C901 `main` is too complex (22 > 10)
    |
290 | def main():
    |     ^^^^ C901
291 |     print_info("FluxFCE Dependency Checker for Debian/Ubuntu-based systems")
292 |     print_info("=" * 60)
    |

srss.py:40:5: C901 `main` is too complex (11 > 10)
   |
39 | # --- Main Function ---
40 | def main():
   |     ^^^^ C901
41 |     parser = argparse.ArgumentParser(
42 |         description="Calculate sunrise/sunset times for N days using fluxfce config.",
   |

Found 25 errors.
